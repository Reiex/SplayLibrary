#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file Vec.hpp
/// \brief Functions and classes for vectors manipulations.
/// \author Reiex
/// 
/// For a more detailed description, see class Vec.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SciPP/types.hpp>
#include <SciPP/Tensor.hpp>

namespace scp
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \class Vec
	/// \brief Class for vectors manipulations
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	class Vec : public Tensor<T, 1>
	{
		public:

			Vec() = delete;
			Vec(const Tensor<T, 1>& tensor);		///< Init the vector from a tensor of order 1.
			Vec(Tensor<T, 1>&& tensor);				///< Init the vector from a tensor of order 1.
			Vec(uint64_t count, int64_t value = 0);	///< Init all the components of the vector with T(value).
			Vec(uint64_t count, const T& value);	///< Init all the components of the vector with value.
			Vec(const std::vector<T>& values);		///< Init the vector directly with values.
			Vec(const Vec<T>& v) = default;
			Vec(Vec<T>&& v) = default;

			Vec<T>& operator=(const Vec<T>& a);
			Vec<T>& operator=(Vec<T>&& a);

			~Vec() = default;
	};

	// Specific functions

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \relates Vec
	/// \brief Cross product between two 3-dimensional vectors
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	Vec<T> crossProduct(const Vec<T>& u, const Vec<T>& v);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \relates Vec
	/// \brief Discrete Cosine Transform of a vector. (Type II corrected)
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	Vec<T> dct(const Vec<T>& f);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \relates Vec
	/// \brief Inverse Discrete Cosine Transform of a vector. (Type II corrected)
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	Vec<T> idct(const Vec<T>& fh);
}

#include <SciPP/VecT.hpp>
