#pragma once

#include <SciPP/types.hpp>

namespace scp
{
	constexpr long double pi = 3.141592653589793239;
	constexpr long double e = 2.718281828459045235;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Computes `x` exponent `n` for `n` greater or equal to `0`.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename TBase, typename TPow = uint64_t>
	TBase pow(TBase const& x, TPow n);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Computes the factorial of `n`.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	T fact(const T& n);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Computes the greatest common divisor (GCD) of `a` and `b`.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	T gcd(const T& a, const T& b);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Computes the least common multiple (LCM) of `a` and `b`.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	T lcm(const T& a, const T& b);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Computes the binomial coefficient of `n` and `p`.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	T binom(const T& n, const T& p);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Returns `true` if `n` is a prime number.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	bool isPrime(const T& n);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Returns pairs of prime factor and multiplicity factors associated to the prime factors of `n`.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	std::vector<std::pair<T, uint64_t>> primeFactors(const T& n);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Returns all the divisors of n (including `n` and `1`) in ascending order.
	///
	/// If `n` is `0` an empty vector is returned.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	std::vector<T> divisors(const T& n);
}

#include <SciPP/miscT.hpp>