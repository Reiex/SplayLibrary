#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief General purpose image processing functions.
/// \author Reiex
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <DejaVu/ImageProcessing/types.hpp>

namespace djv
{
	namespace operators
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \addtogroup operators
		/// \{
		/// \ingroup ImageProcessing
		/// \{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns an approximation of the gradient of a matrix.
		/// 
		/// This approximation is computed using the kernels `(-1 0 1)` and its transpose.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		std::array<Img<PixelType>, 2> simpleGradient(const Img<PixelType>& m);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the Sobel gradient of a matrix.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		std::array<Img<PixelType>, 2> sobel(const Img<PixelType>& m);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the Prewitt gradient of a matrix.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		std::array<Img<PixelType>, 2> prewitt(const Img<PixelType>& m);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the second order derivatives of a matrix.
		/// 
		/// This function returns three matrices containing the second order derivatives
		/// \f$(\partial_{xx}m, \partial_{xy}m, \partial_{yy}m)\f$.
		/// These derivatives are computed using the kernels `(1 -2 1)` and its transpose and
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		std::array<Img<PixelType>, 3> simpleHessian(const Img<PixelType>& m);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns an approximation of the laplacian of a matrix.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		Img<PixelType> simpleLaplacian(const Img<PixelType>& m);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \}
		/// \}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}

	namespace blur
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \addtogroup blur
		/// \{
		/// \ingroup ImageProcessing
		/// \{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the blurred matrix using a gaussian function.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		Img<PixelType> gaussian(const Img<PixelType>& m, float sigma = 1.f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the denoised matrix using bilateral filter.
		/// 
		/// The function used for the spatial component is a gaussian.
		/// The function used for the intensity component is a gaussian.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		Img<PixelType> gaussianBilateral(const Img<PixelType>& m, float sigmaSpace = 1.f, float sigmaIntensity = 0.1f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the blurred matrix using the median on a patch of size `(2*n + 1)*(2*n + 1)`
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		Img<PixelType> median(const Img<PixelType>& m, uint64_t n);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the blurred matrix using the mean on a patch of size `(2*n + 1)*(2*n + 1)`
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template<typename PixelType>
		Img<PixelType> mean(const Img<PixelType>& m, uint64_t n);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \}
		/// \}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}

#include <DejaVu/ImageProcessing/MiscT.hpp>
